ARM GAS  /tmp/cconTXWF.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"freertos.c"
  13              		.section	.rodata.str1.4,"aMS",%progbits,1
  14              		.align	2
  15              	.LC0:
  16 0000 64656661 		.ascii	"defaultTask\000"
  16      756C7454 
  16      61736B00 
  17              		.align	2
  18              	.LC2:
  19 000c 626C696E 		.ascii	"blink\000"
  19      6B00
  20 0012 0000     		.align	2
  21              	.LC4:
  22 0014 626C696E 		.ascii	"blink2\000"
  22      6B3200
  23              		.text
  24              	.Ltext0:
  25              		.cfi_sections	.debug_frame
  26              		.section	.text.LED_Blinks,"ax",%progbits
  27              		.align	1
  28              		.global	LED_Blinks
  29              		.arch armv7e-m
  30              		.syntax unified
  31              		.thumb
  32              		.thumb_func
  33              		.fpu fpv5-d16
  35              	LED_Blinks:
  36              	.LFB149:
  37              		.file 1 "Core/Src/freertos.c"
   1:Core/Src/freertos.c **** /* USER CODE BEGIN Header */
   2:Core/Src/freertos.c **** /**
   3:Core/Src/freertos.c ****   ******************************************************************************
   4:Core/Src/freertos.c ****   * File Name          : freertos.c
   5:Core/Src/freertos.c ****   * Description        : Code for freertos applications
   6:Core/Src/freertos.c ****   ******************************************************************************
   7:Core/Src/freertos.c ****   * @attention
   8:Core/Src/freertos.c ****   *
   9:Core/Src/freertos.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/freertos.c ****   * All rights reserved.</center></h2>
  11:Core/Src/freertos.c ****   *
  12:Core/Src/freertos.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/freertos.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Core/Src/freertos.c ****   * the License. You may obtain a copy of the License at:
  15:Core/Src/freertos.c ****   *                             www.st.com/SLA0044
  16:Core/Src/freertos.c ****   *
  17:Core/Src/freertos.c ****   ******************************************************************************
ARM GAS  /tmp/cconTXWF.s 			page 2


  18:Core/Src/freertos.c ****   */
  19:Core/Src/freertos.c **** /* USER CODE END Header */
  20:Core/Src/freertos.c **** 
  21:Core/Src/freertos.c **** /* Includes ------------------------------------------------------------------*/
  22:Core/Src/freertos.c **** #include "FreeRTOS.h"
  23:Core/Src/freertos.c **** #include "task.h"
  24:Core/Src/freertos.c **** #include "main.h"
  25:Core/Src/freertos.c **** #include "cmsis_os.h"
  26:Core/Src/freertos.c **** 
  27:Core/Src/freertos.c **** /* Private includes ----------------------------------------------------------*/
  28:Core/Src/freertos.c **** /* USER CODE BEGIN Includes */
  29:Core/Src/freertos.c **** 
  30:Core/Src/freertos.c **** /* USER CODE END Includes */
  31:Core/Src/freertos.c **** 
  32:Core/Src/freertos.c **** /* Private typedef -----------------------------------------------------------*/
  33:Core/Src/freertos.c **** /* USER CODE BEGIN PTD */
  34:Core/Src/freertos.c **** 
  35:Core/Src/freertos.c **** /* USER CODE END PTD */
  36:Core/Src/freertos.c **** 
  37:Core/Src/freertos.c **** /* Private define ------------------------------------------------------------*/
  38:Core/Src/freertos.c **** /* USER CODE BEGIN PD */
  39:Core/Src/freertos.c **** 
  40:Core/Src/freertos.c **** /* USER CODE END PD */
  41:Core/Src/freertos.c **** 
  42:Core/Src/freertos.c **** /* Private macro -------------------------------------------------------------*/
  43:Core/Src/freertos.c **** /* USER CODE BEGIN PM */
  44:Core/Src/freertos.c **** 
  45:Core/Src/freertos.c **** /* USER CODE END PM */
  46:Core/Src/freertos.c **** 
  47:Core/Src/freertos.c **** /* Private variables ---------------------------------------------------------*/
  48:Core/Src/freertos.c **** /* USER CODE BEGIN Variables */
  49:Core/Src/freertos.c **** osThreadId BlinkTaskHandle;
  50:Core/Src/freertos.c **** osThreadId Blink2TaskHandle;
  51:Core/Src/freertos.c **** /* USER CODE END Variables */
  52:Core/Src/freertos.c **** osThreadId defaultTaskHandle;
  53:Core/Src/freertos.c **** 
  54:Core/Src/freertos.c **** /* Private function prototypes -----------------------------------------------*/
  55:Core/Src/freertos.c **** /* USER CODE BEGIN FunctionPrototypes */
  56:Core/Src/freertos.c **** void LED_Blinks(void){
  38              		.loc 1 56 22 view -0
  39              		.cfi_startproc
  40              		@ Volatile: function does not return.
  41              		@ args = 0, pretend = 0, frame = 0
  42              		@ frame_needed = 0, uses_anonymous_args = 0
  43 0000 08B5     		push	{r3, lr}
  44              	.LCFI0:
  45              		.cfi_def_cfa_offset 8
  46              		.cfi_offset 3, -8
  47              		.cfi_offset 14, -4
  48              	.L2:
  57:Core/Src/freertos.c ****   for(;;)
  49              		.loc 1 57 3 discriminator 1 view .LVU1
  58:Core/Src/freertos.c ****   {
  59:Core/Src/freertos.c ****     HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);
  50              		.loc 1 59 5 discriminator 1 view .LVU2
  51 0002 0121     		movs	r1, #1
  52 0004 0348     		ldr	r0, .L4
ARM GAS  /tmp/cconTXWF.s 			page 3


  53 0006 FFF7FEFF 		bl	HAL_GPIO_TogglePin
  54              	.LVL0:
  60:Core/Src/freertos.c ****     //printf("hello world\r\n");
  61:Core/Src/freertos.c ****     osDelay(500);
  55              		.loc 1 61 5 discriminator 1 view .LVU3
  56 000a 4FF4FA70 		mov	r0, #500
  57 000e FFF7FEFF 		bl	osDelay
  58              	.LVL1:
  57:Core/Src/freertos.c ****   {
  59              		.loc 1 57 8 discriminator 1 view .LVU4
  60 0012 F6E7     		b	.L2
  61              	.L5:
  62              		.align	2
  63              	.L4:
  64 0014 00040258 		.word	1476527104
  65              		.cfi_endproc
  66              	.LFE149:
  68              		.section	.text.LED_Blinks2,"ax",%progbits
  69              		.align	1
  70              		.global	LED_Blinks2
  71              		.syntax unified
  72              		.thumb
  73              		.thumb_func
  74              		.fpu fpv5-d16
  76              	LED_Blinks2:
  77              	.LFB150:
  62:Core/Src/freertos.c ****   }
  63:Core/Src/freertos.c **** }
  64:Core/Src/freertos.c **** void LED_Blinks2(void){
  78              		.loc 1 64 23 view -0
  79              		.cfi_startproc
  80              		@ Volatile: function does not return.
  81              		@ args = 0, pretend = 0, frame = 0
  82              		@ frame_needed = 0, uses_anonymous_args = 0
  83 0000 08B5     		push	{r3, lr}
  84              	.LCFI1:
  85              		.cfi_def_cfa_offset 8
  86              		.cfi_offset 3, -8
  87              		.cfi_offset 14, -4
  88              	.L7:
  65:Core/Src/freertos.c ****   for(;;)
  89              		.loc 1 65 3 discriminator 1 view .LVU6
  66:Core/Src/freertos.c ****   {
  67:Core/Src/freertos.c ****     HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
  90              		.loc 1 67 5 discriminator 1 view .LVU7
  91 0002 0221     		movs	r1, #2
  92 0004 0348     		ldr	r0, .L9
  93 0006 FFF7FEFF 		bl	HAL_GPIO_TogglePin
  94              	.LVL2:
  68:Core/Src/freertos.c ****     //printf("hello world\r\n");
  69:Core/Src/freertos.c ****     osDelay(1500);
  95              		.loc 1 69 5 discriminator 1 view .LVU8
  96 000a 40F2DC50 		movw	r0, #1500
  97 000e FFF7FEFF 		bl	osDelay
  98              	.LVL3:
  65:Core/Src/freertos.c ****   {
  99              		.loc 1 65 8 discriminator 1 view .LVU9
ARM GAS  /tmp/cconTXWF.s 			page 4


 100 0012 F6E7     		b	.L7
 101              	.L10:
 102              		.align	2
 103              	.L9:
 104 0014 00040258 		.word	1476527104
 105              		.cfi_endproc
 106              	.LFE150:
 108              		.section	.text.StartDefaultTask,"ax",%progbits
 109              		.align	1
 110              		.global	StartDefaultTask
 111              		.syntax unified
 112              		.thumb
 113              		.thumb_func
 114              		.fpu fpv5-d16
 116              	StartDefaultTask:
 117              	.LFB154:
  70:Core/Src/freertos.c ****   }
  71:Core/Src/freertos.c **** }
  72:Core/Src/freertos.c **** /* USER CODE END FunctionPrototypes */
  73:Core/Src/freertos.c **** 
  74:Core/Src/freertos.c **** void StartDefaultTask(void const * argument);
  75:Core/Src/freertos.c **** 
  76:Core/Src/freertos.c **** void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */
  77:Core/Src/freertos.c **** 
  78:Core/Src/freertos.c **** /* GetIdleTaskMemory prototype (linked to static allocation support) */
  79:Core/Src/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
  80:Core/Src/freertos.c **** 
  81:Core/Src/freertos.c **** /* Hook prototypes */
  82:Core/Src/freertos.c **** void vApplicationTickHook(void);
  83:Core/Src/freertos.c **** 
  84:Core/Src/freertos.c **** /* USER CODE BEGIN 3 */
  85:Core/Src/freertos.c **** __weak void vApplicationTickHook( void )
  86:Core/Src/freertos.c **** {
  87:Core/Src/freertos.c ****    /* This function will be called by each tick interrupt if
  88:Core/Src/freertos.c ****    configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
  89:Core/Src/freertos.c ****    added here, but the tick hook is called from an interrupt context, so
  90:Core/Src/freertos.c ****    code must not attempt to block, and only the interrupt safe FreeRTOS API
  91:Core/Src/freertos.c ****    functions can be used (those that end in FromISR()). */
  92:Core/Src/freertos.c **** }
  93:Core/Src/freertos.c **** /* USER CODE END 3 */
  94:Core/Src/freertos.c **** 
  95:Core/Src/freertos.c **** /* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
  96:Core/Src/freertos.c **** static StaticTask_t xIdleTaskTCBBuffer;
  97:Core/Src/freertos.c **** static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  98:Core/Src/freertos.c **** 
  99:Core/Src/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
 100:Core/Src/freertos.c **** {
 101:Core/Src/freertos.c ****   *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 102:Core/Src/freertos.c ****   *ppxIdleTaskStackBuffer = &xIdleStack[0];
 103:Core/Src/freertos.c ****   *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 104:Core/Src/freertos.c ****   /* place for user code */
 105:Core/Src/freertos.c **** }
 106:Core/Src/freertos.c **** /* USER CODE END GET_IDLE_TASK_MEMORY */
 107:Core/Src/freertos.c **** 
 108:Core/Src/freertos.c **** /**
 109:Core/Src/freertos.c ****   * @brief  FreeRTOS initialization
 110:Core/Src/freertos.c ****   * @param  None
ARM GAS  /tmp/cconTXWF.s 			page 5


 111:Core/Src/freertos.c ****   * @retval None
 112:Core/Src/freertos.c ****   */
 113:Core/Src/freertos.c **** void MX_FREERTOS_Init(void) {
 114:Core/Src/freertos.c ****   /* USER CODE BEGIN Init */
 115:Core/Src/freertos.c **** 
 116:Core/Src/freertos.c ****   /* USER CODE END Init */
 117:Core/Src/freertos.c **** 
 118:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 119:Core/Src/freertos.c ****   /* add mutexes, ... */
 120:Core/Src/freertos.c ****   /* USER CODE END RTOS_MUTEX */
 121:Core/Src/freertos.c **** 
 122:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 123:Core/Src/freertos.c ****   /* add semaphores, ... */
 124:Core/Src/freertos.c ****   /* USER CODE END RTOS_SEMAPHORES */
 125:Core/Src/freertos.c **** 
 126:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 127:Core/Src/freertos.c ****   /* start timers, add new ones, ... */
 128:Core/Src/freertos.c ****   /* USER CODE END RTOS_TIMERS */
 129:Core/Src/freertos.c **** 
 130:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 131:Core/Src/freertos.c ****   /* add queues, ... */
 132:Core/Src/freertos.c ****   /* USER CODE END RTOS_QUEUES */
 133:Core/Src/freertos.c **** 
 134:Core/Src/freertos.c ****   /* Create the thread(s) */
 135:Core/Src/freertos.c ****   /* definition and creation of defaultTask */
 136:Core/Src/freertos.c ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 137:Core/Src/freertos.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 138:Core/Src/freertos.c ****   osThreadDef(blink, LED_Blinks, osPriorityNormal, 0, 128);
 139:Core/Src/freertos.c ****   BlinkTaskHandle = osThreadCreate(osThread(blink), NULL);
 140:Core/Src/freertos.c ****   osThreadDef(blink2, LED_Blinks2, osPriorityNormal, 0, 128);
 141:Core/Src/freertos.c ****   Blink2TaskHandle = osThreadCreate(osThread(blink2), NULL);
 142:Core/Src/freertos.c **** 
 143:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_THREADS */
 144:Core/Src/freertos.c ****   /* add threads, ... */
 145:Core/Src/freertos.c ****   /* USER CODE END RTOS_THREADS */
 146:Core/Src/freertos.c **** 
 147:Core/Src/freertos.c **** }
 148:Core/Src/freertos.c **** 
 149:Core/Src/freertos.c **** /* USER CODE BEGIN Header_StartDefaultTask */
 150:Core/Src/freertos.c **** /**
 151:Core/Src/freertos.c ****   * @brief  Function implementing the defaultTask thread.
 152:Core/Src/freertos.c ****   * @param  argument: Not used
 153:Core/Src/freertos.c ****   * @retval None
 154:Core/Src/freertos.c ****   */
 155:Core/Src/freertos.c **** /* USER CODE END Header_StartDefaultTask */
 156:Core/Src/freertos.c **** void StartDefaultTask(void const * argument)
 157:Core/Src/freertos.c **** {
 118              		.loc 1 157 1 view -0
 119              		.cfi_startproc
 120              		@ Volatile: function does not return.
 121              		@ args = 0, pretend = 0, frame = 0
 122              		@ frame_needed = 0, uses_anonymous_args = 0
 123              	.LVL4:
 124              		.loc 1 157 1 is_stmt 0 view .LVU11
 125 0000 08B5     		push	{r3, lr}
 126              	.LCFI2:
 127              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cconTXWF.s 			page 6


 128              		.cfi_offset 3, -8
 129              		.cfi_offset 14, -4
 130              	.LVL5:
 131              	.L12:
 158:Core/Src/freertos.c ****   /* USER CODE BEGIN StartDefaultTask */
 159:Core/Src/freertos.c ****   /* Infinite loop */
 160:Core/Src/freertos.c ****   for(;;)
 132              		.loc 1 160 3 is_stmt 1 discriminator 1 view .LVU12
 161:Core/Src/freertos.c ****   {
 162:Core/Src/freertos.c ****     osDelay(1);
 133              		.loc 1 162 5 discriminator 1 view .LVU13
 134 0002 0120     		movs	r0, #1
 135 0004 FFF7FEFF 		bl	osDelay
 136              	.LVL6:
 160:Core/Src/freertos.c ****   {
 137              		.loc 1 160 8 discriminator 1 view .LVU14
 138 0008 FBE7     		b	.L12
 139              		.cfi_endproc
 140              	.LFE154:
 142              		.section	.text.vApplicationTickHook,"ax",%progbits
 143              		.align	1
 144              		.weak	vApplicationTickHook
 145              		.syntax unified
 146              		.thumb
 147              		.thumb_func
 148              		.fpu fpv5-d16
 150              	vApplicationTickHook:
 151              	.LFB151:
  86:Core/Src/freertos.c ****    /* This function will be called by each tick interrupt if
 152              		.loc 1 86 1 view -0
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 0
 155              		@ frame_needed = 0, uses_anonymous_args = 0
 156              		@ link register save eliminated.
  92:Core/Src/freertos.c **** /* USER CODE END 3 */
 157              		.loc 1 92 1 view .LVU16
 158 0000 7047     		bx	lr
 159              		.cfi_endproc
 160              	.LFE151:
 162              		.section	.text.vApplicationGetIdleTaskMemory,"ax",%progbits
 163              		.align	1
 164              		.global	vApplicationGetIdleTaskMemory
 165              		.syntax unified
 166              		.thumb
 167              		.thumb_func
 168              		.fpu fpv5-d16
 170              	vApplicationGetIdleTaskMemory:
 171              	.LVL7:
 172              	.LFB152:
 100:Core/Src/freertos.c ****   *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 173              		.loc 1 100 1 view -0
 174              		.cfi_startproc
 175              		@ args = 0, pretend = 0, frame = 0
 176              		@ frame_needed = 0, uses_anonymous_args = 0
 177              		@ link register save eliminated.
 101:Core/Src/freertos.c ****   *ppxIdleTaskStackBuffer = &xIdleStack[0];
 178              		.loc 1 101 3 view .LVU18
ARM GAS  /tmp/cconTXWF.s 			page 7


 101:Core/Src/freertos.c ****   *ppxIdleTaskStackBuffer = &xIdleStack[0];
 179              		.loc 1 101 25 is_stmt 0 view .LVU19
 180 0000 034B     		ldr	r3, .L16
 181 0002 0360     		str	r3, [r0]
 102:Core/Src/freertos.c ****   *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 182              		.loc 1 102 3 is_stmt 1 view .LVU20
 102:Core/Src/freertos.c ****   *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 183              		.loc 1 102 27 is_stmt 0 view .LVU21
 184 0004 034B     		ldr	r3, .L16+4
 185 0006 0B60     		str	r3, [r1]
 103:Core/Src/freertos.c ****   /* place for user code */
 186              		.loc 1 103 3 is_stmt 1 view .LVU22
 103:Core/Src/freertos.c ****   /* place for user code */
 187              		.loc 1 103 25 is_stmt 0 view .LVU23
 188 0008 8023     		movs	r3, #128
 189 000a 1360     		str	r3, [r2]
 105:Core/Src/freertos.c **** /* USER CODE END GET_IDLE_TASK_MEMORY */
 190              		.loc 1 105 1 view .LVU24
 191 000c 7047     		bx	lr
 192              	.L17:
 193 000e 00BF     		.align	2
 194              	.L16:
 195 0010 00000000 		.word	.LANCHOR0
 196 0014 00000000 		.word	.LANCHOR1
 197              		.cfi_endproc
 198              	.LFE152:
 200              		.section	.text.MX_FREERTOS_Init,"ax",%progbits
 201              		.align	1
 202              		.global	MX_FREERTOS_Init
 203              		.syntax unified
 204              		.thumb
 205              		.thumb_func
 206              		.fpu fpv5-d16
 208              	MX_FREERTOS_Init:
 209              	.LFB153:
 113:Core/Src/freertos.c ****   /* USER CODE BEGIN Init */
 210              		.loc 1 113 29 is_stmt 1 view -0
 211              		.cfi_startproc
 212              		@ args = 0, pretend = 0, frame = 88
 213              		@ frame_needed = 0, uses_anonymous_args = 0
 214 0000 10B5     		push	{r4, lr}
 215              	.LCFI3:
 216              		.cfi_def_cfa_offset 8
 217              		.cfi_offset 4, -8
 218              		.cfi_offset 14, -4
 219 0002 96B0     		sub	sp, sp, #88
 220              	.LCFI4:
 221              		.cfi_def_cfa_offset 96
 136:Core/Src/freertos.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 222              		.loc 1 136 3 view .LVU26
 223 0004 1B4C     		ldr	r4, .L20
 224 0006 0DF13C0C 		add	ip, sp, #60
 225 000a A646     		mov	lr, r4
 226 000c BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 227 0010 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 228 0014 9EE80700 		ldm	lr, {r0, r1, r2}
 229 0018 8CE80700 		stm	ip, {r0, r1, r2}
ARM GAS  /tmp/cconTXWF.s 			page 8


 137:Core/Src/freertos.c ****   osThreadDef(blink, LED_Blinks, osPriorityNormal, 0, 128);
 230              		.loc 1 137 3 view .LVU27
 137:Core/Src/freertos.c ****   osThreadDef(blink, LED_Blinks, osPriorityNormal, 0, 128);
 231              		.loc 1 137 23 is_stmt 0 view .LVU28
 232 001c 0021     		movs	r1, #0
 233 001e 0FA8     		add	r0, sp, #60
 234 0020 FFF7FEFF 		bl	osThreadCreate
 235              	.LVL8:
 137:Core/Src/freertos.c ****   osThreadDef(blink, LED_Blinks, osPriorityNormal, 0, 128);
 236              		.loc 1 137 21 view .LVU29
 237 0024 144B     		ldr	r3, .L20+4
 238 0026 1860     		str	r0, [r3]
 138:Core/Src/freertos.c ****   BlinkTaskHandle = osThreadCreate(osThread(blink), NULL);
 239              		.loc 1 138 3 is_stmt 1 view .LVU30
 240 0028 0DF1200C 		add	ip, sp, #32
 241 002c 04F11C0E 		add	lr, r4, #28
 242 0030 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 243 0034 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 244 0038 9EE80700 		ldm	lr, {r0, r1, r2}
 245 003c 8CE80700 		stm	ip, {r0, r1, r2}
 139:Core/Src/freertos.c ****   osThreadDef(blink2, LED_Blinks2, osPriorityNormal, 0, 128);
 246              		.loc 1 139 3 view .LVU31
 139:Core/Src/freertos.c ****   osThreadDef(blink2, LED_Blinks2, osPriorityNormal, 0, 128);
 247              		.loc 1 139 21 is_stmt 0 view .LVU32
 248 0040 0021     		movs	r1, #0
 249 0042 08A8     		add	r0, sp, #32
 250 0044 FFF7FEFF 		bl	osThreadCreate
 251              	.LVL9:
 139:Core/Src/freertos.c ****   osThreadDef(blink2, LED_Blinks2, osPriorityNormal, 0, 128);
 252              		.loc 1 139 19 view .LVU33
 253 0048 0C4B     		ldr	r3, .L20+8
 254 004a 1860     		str	r0, [r3]
 140:Core/Src/freertos.c ****   Blink2TaskHandle = osThreadCreate(osThread(blink2), NULL);
 255              		.loc 1 140 3 is_stmt 1 view .LVU34
 256 004c 0DF1040E 		add	lr, sp, #4
 257 0050 04F1380C 		add	ip, r4, #56
 258 0054 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 259 0058 AEE80F00 		stmia	lr!, {r0, r1, r2, r3}
 260 005c 9CE80700 		ldm	ip, {r0, r1, r2}
 261 0060 8EE80700 		stm	lr, {r0, r1, r2}
 141:Core/Src/freertos.c **** 
 262              		.loc 1 141 3 view .LVU35
 141:Core/Src/freertos.c **** 
 263              		.loc 1 141 22 is_stmt 0 view .LVU36
 264 0064 0021     		movs	r1, #0
 265 0066 01A8     		add	r0, sp, #4
 266 0068 FFF7FEFF 		bl	osThreadCreate
 267              	.LVL10:
 141:Core/Src/freertos.c **** 
 268              		.loc 1 141 20 view .LVU37
 269 006c 044B     		ldr	r3, .L20+12
 270 006e 1860     		str	r0, [r3]
 147:Core/Src/freertos.c **** 
 271              		.loc 1 147 1 view .LVU38
 272 0070 16B0     		add	sp, sp, #88
 273              	.LCFI5:
 274              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cconTXWF.s 			page 9


 275              		@ sp needed
 276 0072 10BD     		pop	{r4, pc}
 277              	.L21:
 278              		.align	2
 279              	.L20:
 280 0074 00000000 		.word	.LANCHOR2
 281 0078 00000000 		.word	.LANCHOR3
 282 007c 00000000 		.word	.LANCHOR4
 283 0080 00000000 		.word	.LANCHOR5
 284              		.cfi_endproc
 285              	.LFE153:
 287              		.global	defaultTaskHandle
 288              		.global	Blink2TaskHandle
 289              		.global	BlinkTaskHandle
 290              		.section	.rodata
 291              		.align	2
 292              		.set	.LANCHOR2,. + 0
 293              	.LC6:
 294 0000 00000000 		.word	.LC0
 295 0004 00000000 		.word	StartDefaultTask
 296 0008 0000     		.short	0
 297 000a 0000     		.space	2
 298 000c 00000000 		.word	0
 299 0010 80000000 		.word	128
 300 0014 00000000 		.word	0
 301 0018 00000000 		.word	0
 302              	.LC7:
 303 001c 0C000000 		.word	.LC2
 304 0020 00000000 		.word	LED_Blinks
 305 0024 0000     		.short	0
 306 0026 0000     		.space	2
 307 0028 00000000 		.word	0
 308 002c 80000000 		.word	128
 309 0030 00000000 		.word	0
 310 0034 00000000 		.word	0
 311              	.LC8:
 312 0038 14000000 		.word	.LC4
 313 003c 00000000 		.word	LED_Blinks2
 314 0040 0000     		.short	0
 315 0042 0000     		.space	2
 316 0044 00000000 		.word	0
 317 0048 80000000 		.word	128
 318 004c 00000000 		.word	0
 319 0050 00000000 		.word	0
 320              		.section	.bss.Blink2TaskHandle,"aw",%nobits
 321              		.align	2
 322              		.set	.LANCHOR5,. + 0
 325              	Blink2TaskHandle:
 326 0000 00000000 		.space	4
 327              		.section	.bss.BlinkTaskHandle,"aw",%nobits
 328              		.align	2
 329              		.set	.LANCHOR4,. + 0
 332              	BlinkTaskHandle:
 333 0000 00000000 		.space	4
 334              		.section	.bss.defaultTaskHandle,"aw",%nobits
 335              		.align	2
 336              		.set	.LANCHOR3,. + 0
ARM GAS  /tmp/cconTXWF.s 			page 10


 339              	defaultTaskHandle:
 340 0000 00000000 		.space	4
 341              		.section	.bss.xIdleStack,"aw",%nobits
 342              		.align	2
 343              		.set	.LANCHOR1,. + 0
 346              	xIdleStack:
 347 0000 00000000 		.space	512
 347      00000000 
 347      00000000 
 347      00000000 
 347      00000000 
 348              		.section	.bss.xIdleTaskTCBBuffer,"aw",%nobits
 349              		.align	2
 350              		.set	.LANCHOR0,. + 0
 353              	xIdleTaskTCBBuffer:
 354 0000 00000000 		.space	84
 354      00000000 
 354      00000000 
 354      00000000 
 354      00000000 
 355              		.text
 356              	.Letext0:
 357              		.file 2 "/home/akinya/gcc-arm-none-eabi/arm-none-eabi/include/machine/_default_types.h"
 358              		.file 3 "/home/akinya/gcc-arm-none-eabi/arm-none-eabi/include/sys/_stdint.h"
 359              		.file 4 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 360              		.file 5 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 361              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 362              		.file 7 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h743xx.h"
 363              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 364              		.file 9 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_gpio.h"
ARM GAS  /tmp/cconTXWF.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 freertos.c
     /tmp/cconTXWF.s:14     .rodata.str1.4:0000000000000000 $d
     /tmp/cconTXWF.s:27     .text.LED_Blinks:0000000000000000 $t
     /tmp/cconTXWF.s:35     .text.LED_Blinks:0000000000000000 LED_Blinks
     /tmp/cconTXWF.s:64     .text.LED_Blinks:0000000000000014 $d
     /tmp/cconTXWF.s:69     .text.LED_Blinks2:0000000000000000 $t
     /tmp/cconTXWF.s:76     .text.LED_Blinks2:0000000000000000 LED_Blinks2
     /tmp/cconTXWF.s:104    .text.LED_Blinks2:0000000000000014 $d
     /tmp/cconTXWF.s:109    .text.StartDefaultTask:0000000000000000 $t
     /tmp/cconTXWF.s:116    .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/cconTXWF.s:143    .text.vApplicationTickHook:0000000000000000 $t
     /tmp/cconTXWF.s:150    .text.vApplicationTickHook:0000000000000000 vApplicationTickHook
     /tmp/cconTXWF.s:163    .text.vApplicationGetIdleTaskMemory:0000000000000000 $t
     /tmp/cconTXWF.s:170    .text.vApplicationGetIdleTaskMemory:0000000000000000 vApplicationGetIdleTaskMemory
     /tmp/cconTXWF.s:195    .text.vApplicationGetIdleTaskMemory:0000000000000010 $d
     /tmp/cconTXWF.s:201    .text.MX_FREERTOS_Init:0000000000000000 $t
     /tmp/cconTXWF.s:208    .text.MX_FREERTOS_Init:0000000000000000 MX_FREERTOS_Init
     /tmp/cconTXWF.s:280    .text.MX_FREERTOS_Init:0000000000000074 $d
     /tmp/cconTXWF.s:339    .bss.defaultTaskHandle:0000000000000000 defaultTaskHandle
     /tmp/cconTXWF.s:325    .bss.Blink2TaskHandle:0000000000000000 Blink2TaskHandle
     /tmp/cconTXWF.s:332    .bss.BlinkTaskHandle:0000000000000000 BlinkTaskHandle
     /tmp/cconTXWF.s:291    .rodata:0000000000000000 $d
     /tmp/cconTXWF.s:321    .bss.Blink2TaskHandle:0000000000000000 $d
     /tmp/cconTXWF.s:328    .bss.BlinkTaskHandle:0000000000000000 $d
     /tmp/cconTXWF.s:335    .bss.defaultTaskHandle:0000000000000000 $d
     /tmp/cconTXWF.s:342    .bss.xIdleStack:0000000000000000 $d
     /tmp/cconTXWF.s:346    .bss.xIdleStack:0000000000000000 xIdleStack
     /tmp/cconTXWF.s:349    .bss.xIdleTaskTCBBuffer:0000000000000000 $d
     /tmp/cconTXWF.s:353    .bss.xIdleTaskTCBBuffer:0000000000000000 xIdleTaskTCBBuffer

UNDEFINED SYMBOLS
HAL_GPIO_TogglePin
osDelay
osThreadCreate
